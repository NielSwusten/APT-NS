name: Build and deliver containers

on: push

jobs:
  albumservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver album-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Run Unit Tests
        working-directory: ./album-service
        run: mvn test -B

      - name: Build and Package Project
        working-directory: ./album-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/album-service:latest ./album-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/album-service:latest

  artiestservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver artiest-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Run Unit Tests
        working-directory: ./artiest-service
        run: mvn test -B

      - name: Build, test and package project
        working-directory: ./artiest-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/artiest-service:latest ./artiest-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/artiest-service:latest

  winkelservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver winkel-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Run Unit Tests
        working-directory: ./winkel-service
        run: mvn test -B

      - name: Build, test and package project
        working-directory: ./winkel-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/winkel-service:latest ./winkel-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/winkel-service:latest

  apigateway:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver API Gateway container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./api-gateway
        run: mvn package -B -DskipTests=true

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build        
        run: docker build --build-arg GOOGLE_CLIENTID=${{ secrets.GOOGLE_CLIENTID }} --build-arg GOOGLE_CLIENTSECRET=${{ secrets.GOOGLE_CLIENTSECRET }} -t ${{ secrets.DOCKER_USER }}/api-gateway:latest ./api-gateway

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/api-gateway:latest

  frontend:
    runs-on: ubuntu-latest
    name: Build, test, and deliver React frontend container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Ensure compatibility with react-router

      - name: Install dependencies
        run: npm install --unsafe-perm=true
        working-directory: ./front/frontend

      - name: Ensure executable permissions for react-scripts
        run: chmod -R +x ./front/frontend/node_modules/.bin/
      
      - name: Build the React app
        run: npm run build
        working-directory: ./front/frontend

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/frontend:latest ./front/frontend

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/frontend:latest


        - name: Upload container to Docker Hub with Push
          run: docker push ${{ secrets.DOCKER_USER }}/frontend:latest
